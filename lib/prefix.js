import {ok} from 'assert/strict'


// ESDiPi paper dictates 13 bits for offset and 10 bits for length, but we use
// here 17 bits for offset and 6 bits for length to be able to use a bigger
// prefix (128KB), since SDP static content is not as long as 1024 chars but
// more likely about 36 (<64) chars. A shorter length can allow to use a bigger
// prefix (up to 2MB for 2 bits length - 4 chars) and also allow to append the
// input SDP as part of the prefix, at the cost of limiting the max length of
// potential compressed fragments. This needs to be researched with stadistics
// to find the optimal length, and what are the most optimal prefix chunks.
export const LENGTH = 6     // 10
const OFFSET = 23 - LENGTH  // 13


function addEmailTerminationsPrefix(data)
{
  return [
    `)\r\n${data}`,
    `)\n${data}`,
    `>\r\n${data}`,
    `>\n${data}`
  ]
}


// Add multicast addresses prefixes (224 to 239)
const ip4multicast = Array(16).fill(null).map(function(_, index)
{
  return `c=IN IP4 ${224 + index}`
}).map(addEmailTerminationsPrefix).flat()

const quality = Array(11).fill(null).map(function(_, index)
{
  return `\r\na=quality:${index} `
}).flat()

const rtpmapCodecs = [
  'CN', 'G722', 'H264', 'ILBC', 'ISAC', 'PCMA', 'PCMU', 'VP8', 'VP9', 'opus',
  'red', 'rtx', 'telephone-event', 'ulpfec'
]

const rtpmap = Array(128).fill(null).map(function(_, index)
{
  return rtpmapCodecs.map(function(codec)
  {
    return [
      `000\r\na=rtpmap:${index} ${codec}/1`,
      `000\na=rtpmap:${index} ${codec}/1`
    ]
  })
}).flat(2)


export const statics = [
  'v=0\r\no=- ',
  'v=0\no=- ',

  '\r\ns= \r\ni=',
  '\r\ns= \ni=',
  '\r\ns=-\r\ni=',
  '\r\ns=-\ni=',
  // TODO: extra prefixes when `i=` is not defined

  '\r\nu=',

  ...addEmailTerminationsPrefix('e='),
  ...addEmailTerminationsPrefix('p=+'),

  // connection
  // TODO: add more IP autogenerated `decimal-uchar` prefixes
  ...addEmailTerminationsPrefix('c=IN IP4 0.0.0.0'),
  ...ip4multicast,
  ...addEmailTerminationsPrefix('c=IN IP6 ff'),
  ...addEmailTerminationsPrefix('c=TN RFC2543 '),
  ...addEmailTerminationsPrefix('c=ATM NSAP '),
  ...addEmailTerminationsPrefix('c=ATM GWID '),
  ...addEmailTerminationsPrefix('c=ATM E164 '),
  ...addEmailTerminationsPrefix('c=PSTN E164 '),

  // bandwidth
  ...addEmailTerminationsPrefix('b=AS:'),
  ...addEmailTerminationsPrefix('b=CT:'),
  ...addEmailTerminationsPrefix('b=X-'),  // Not recommended

  ...addEmailTerminationsPrefix('t=0 0\r\nr='),
  ...addEmailTerminationsPrefix('t=0 0\nr='),

  '\r\nz=',

  // keys (obsolete)
  '\r\nk=prompt',
  '\r\nk=clear:',
  '\r\nk=base64:',  // TODO: add `==` sufix down until `t=`
  '\r\nk=uri:',

  '\r\na=extmap-allow-mixed',

  // Media Direction Attributes
  '\r\na=inactive',
  '\r\na=recvonly',
  '\r\na=sendonly',
  '\r\na=sendrecv',

  '\r\na=cat:',  // Obsolete
  '\r\na=charset:UTF-8',
  '\r\na=charset:ISO-8859-15',  // TODO: Maybe `ISO-8859-1` is more optimal?
  '\r\na=crypto:',
  '\r\na=extmap:',
  '\r\na=fingerprint:sha-256 ',
  '\r\na=fmtp:',  // TODO: maybe generate for all `fmt`s?
  '\r\na=framerate:',  // TODO: add digits
  '\r\na=ice-options:trickle renomination',
  '\r\na=ice-pwd:',
  '\r\na=ice-ufrag:',
  '\r\na=group:BUNDLE ',
  '\r\na=keywds:',  // Obsolete
  '\r\na=lang:',
  '\r\na=maxptime:',  // TODO: add digits
  '\r\na=mid:audio',
  '\r\na=mid:video',
  '\r\na=msid-semantic: ',

  // Orientation
  '\r\na=orient:landscape',
  '\r\na=orient:portrait',
  '\r\na=orient:seascape',

  '\r\na=ptime:',
  ...quality,
  '\r\na=rtcp:',
  '\r\na=rtcp-fb:',
  ...rtpmap,
  '\r\na=sdplang:',
  '\r\na=setup:active',
  '\r\na=setup:actpass',
  '000\r\na=ssrc:',
  '000\na=ssrc:',
  '000\r\na=ssrc-group:',
  '000\na=ssrc-group:',
  '\r\na=tool:',

  // Conference Type
  '\r\na=type:broadcast',
  '\r\na=type:meeting',
  '\r\na=type:moderated',
  '\r\na=type:test',
  '\r\na=type:H332',

  '\r\nm=application ',
  '\r\nm=audio ',
  '\r\nm=control ',
  '\r\nm=data ',
  '\r\nm=image ',
  '\r\nm=message ',
  '\r\nm=text ',
  '\r\nm=video '
]

const formatsAndWords = [
  // Formats, and random standalone words
  // NOTE: no whitespace af begin, to reuse one from `m=video `
  // TODO: RTP/AVP 0
  'NORMAL', 'SUM', 'udp', 'RTP/AVP', 'RTP/SAVPF', 'RTP/SAVP',
  'UDP/TLS/RTP/SAVPF', 'urn:ietf:params:rtp-hdrext:ssrc-audio-level',
  'http://www.webrtc.org/experiments/rtp-hdrext/abs-send-time',
  'http://www.webrtc.org/experiments/rtp-hdrext/video-',
  'http://www.ietf.org/id/draft-holmer-rmcat-transport-wide-cc-extensions-01',
  'mslabel:;useinbandfec=1 urn:ietf:params:rtp-hdrext:toffset',
  'nack pli',
  'level-asymmetry-allowed=1;packetization-mode=1;profile-level-id=',
  'goog-remb',
  'cname:',
  'urn:3gpp:video-orientation'
]

const longestStatic = Math.max(...statics.map(({length}) => length))
console.error('longestStatic: ', longestStatic)
ok(longestStatic <= 2**LENGTH, `Longest static: ${longestStatic} chars`)


const prefix = statics.join('') + formatsAndWords.join(' ')

const {length} = prefix
console.error('length: ', length)
ok(length <= 2**OFFSET, `Prefix length: ${length} bytes`)


export default prefix
